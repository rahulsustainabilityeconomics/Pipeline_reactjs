# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  workflow_dispatch:
  #push:
    #branches:
     # - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: se-market-sample-frontend

        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: se-market-place-frontend-sample.json
          container-name: se-market-sample-frontend
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: se-market-place-sample-frontend
          cluster: se-market-place-sample
          wait-for-service-stability: true

      - name: Register targets with existing ALB Target Group
        run: |
          # Replace placeholders with actual values
          ALB_ARN="arn:aws:elasticloadbalancing:ap-south-1:196432606481:loadbalancer/app/se-market-sample/dc07e479c708981d"
          TARGET_GROUP_ARN="arn:aws:elasticloadbalancing:ap-south-1:196432606481:targetgroup/se-sample-TG/5793b4caea976701"
          ECS_SERVICE_NAME="se-market-place-sample-frontend"
          REGION="ap-south-1"

          # Register ECS service with ALB Target Group
          aws ecs update-service \
            --cluster se-market-place-sample \
            --service $ECS_SERVICE_NAME \
            --desired-count 1 \
            --region $REGION

          # Get ECS service ARN
          ECS_SERVICE_ARN=$(aws ecs describe-services --services $ECS_SERVICE_NAME --cluster se-market-place-sample --region $REGION --query 'services[0].serviceArn' --output text)

          # Register ECS service with ALB Target Group
          aws elbv2 register-targets \
            --target-group-arn $TARGET_GROUP_ARN \
            --targets Id=$ECS_SERVICE_ARN

          # Attach ALB Target Group to ALB listener
          aws elbv2 create-listener-rules \
            --listener-arn $ALB_ARN \
            --cli-input-json '{
              "ListenerArn": "ALB_ARN",
              "DefaultActions": [
                {
                  "Type": "forward",
                  "TargetGroupArn": "TARGET_GROUP_ARN"
                }
              ]
            }'
